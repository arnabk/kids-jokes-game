{"version":3,"sources":["Context.js","Bar.js","Question.js","Answer.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","questionNr","checkAnswer","userAnswer","setQuestionNr","setCheckAnswer","setUserAnswer","score","setScore","Provider","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","marginLeft","avatar","margin","color","backgroundColor","deepOrange","OurAppBar","classes","useContext","className","AppBar","position","Toolbar","src","width","height","alt","Typography","variant","Avatar","card","maxWidth","marginTop","textField","Question","question","onChangeUserAns","onClickCheckAnsBtt","disableButton","Card","classname","key","CardActionArea","CardContent","gutterBottom","component","TextField","id","label","value","onChange","CardActions","Button","size","onClick","disabled","thumbIcon","float","right","top","Answer","answer","onClickNextQuestion","win","questions","shuffle","originalOrderedQuestions","Game","useState","setWin","event","target","trim","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.607c7be8.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const Context = createContext({\n  questionNr: 0,\n  checkAnswer: false,\n  userAnswer: '',\n  setQuestionNr: () => {},\n  setCheckAnswer: () => {},\n  setUserAnswer: () => {},\n  score: 0,\n  setScore: () => {},\n});\n\nexport const Provider = Context.Provider;\n","import React, { useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange } from '@material-ui/core/colors';\nimport { Context } from './Context';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    marginLeft: 10,\n  },\n  avatar: {\n    margin: 10,\n    color: '#fff',\n    backgroundColor: deepOrange[500],\n  },\n}));\n\nexport default function OurAppBar() {\n  const classes = useStyles();\n  const { score } = useContext(Context);\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <img src=\"favicon.png\" width=\"50\" height=\"50\" alt=\"Logo\" />\n          <Typography variant=\"h6\" className={classes.title}>\n            Kid's Jokes Game\n          </Typography>\n          <Avatar className={classes.avatar}>{score}</Avatar>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from '@material-ui/core/Typography';\nimport classname from \"classname\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 345,\n    margin: \"auto\",\n    marginTop: 50\n  },\n  textField: {\n    width: \"100%\"\n  }\n}));\n\nconst Question = ({\n  questionNr,\n  question,\n  userAnswer,\n  onChangeUserAns,\n  onClickCheckAnsBtt,\n  disableButton,\n}) => {\n  const classes = useStyles();\n  return (\n    <Card\n      className={classname(classes.card, \"animated\", \"zoomIn\")}\n      key={questionNr}\n    >\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Question #{questionNr + 1}\n          </Typography>\n          <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n            {question}\n          </Typography>\n          <TextField\n            id=\"standard-name\"\n            label=\"What do you think?\"\n            className={classes.textField}\n            value={userAnswer}\n            onChange={onChangeUserAns}\n            margin=\"normal\"\n          />\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" onClick={onClickCheckAnsBtt} disabled={disableButton}>\n          Check Answer\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Question;\n","import Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport classname from 'classname';\nimport React from \"react\";\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    maxWidth: 345,\n    margin: \"auto\",\n    marginTop: 50\n  },\n  thumbIcon: {\n    float: 'right',\n    position: 'fixed',\n    right: 10,\n    top: 10,\n  },\n}));\n\nconst Answer = ({ questionNr, answer, onClickNextQuestion, win }) => {\n  const classes = useStyles();\n  \n  return (\n    <Card className={classname(classes.card, \"animated\", \"tada\")}>\n      {win ? <ThumbUpIcon className={classes.thumbIcon} color=\"primary\" />\n        : <ThumbDownIcon className={classes.thumbIcon} color=\"secondary\" />}\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Answer #{questionNr + 1}\n          </Typography>\n          <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n            {answer}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" onClick={onClickNextQuestion}>\n          Next Question\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Answer;\n","import React, { useContext, useState } from \"react\";\nimport shuffle from 'lodash/shuffle';\nimport originalOrderedQuestions from \"./questions.json\";\nimport { Context } from \"./Context\";\nimport Question from \"./Question\";\nimport Answer from \"./Answer\";\n\nconst questions = shuffle(originalOrderedQuestions);\n\nconst Game = () => {\n  const {\n    questionNr,\n    setQuestionNr,\n    checkAnswer,\n    setCheckAnswer,\n    userAnswer,\n    setUserAnswer,\n    setScore,\n  } = useContext(Context);\n  const [win, setWin] = useState(false);\n\n  const onClickCheckAnsBtt = () => {\n    setCheckAnswer(true);\n    if (userAnswer.trim() &&\n      questions[questionNr].answer.toLowerCase().includes(userAnswer.trim().toLowerCase())) {\n      setScore(score => score + 1);\n      setWin(true);\n    } else {\n      setWin(false);\n    }\n  };\n  const onClickNextQuestion = () => {\n    setQuestionNr(questionNr => questionNr + 1);\n    setCheckAnswer(false);\n    setUserAnswer(\"\");\n  };\n  const onChangeUserAns = event => setUserAnswer(event.target.value);\n\n  return (\n    <>\n      <Question\n        questionNr={questionNr}\n        question={questions[questionNr].question}\n        userAnswer={userAnswer}\n        onChangeUserAns={onChangeUserAns}\n        onClickCheckAnsBtt={onClickCheckAnsBtt}\n        disableButton={checkAnswer}\n      />\n      {checkAnswer && (\n        <Answer\n          questionNr={questionNr}\n          answer={questions[questionNr].answer}\n          onClickNextQuestion={onClickNextQuestion}\n          win={win}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Game;\n","import React, { useState } from 'react';\nimport 'animate.css';\nimport AppBar from './Bar';\nimport Game from './Game';\nimport { Provider } from './Context';\n\nfunction App() {\n  const [questionNr, setQuestionNr] = useState(0);\n  const [checkAnswer, setCheckAnswer] = useState(false);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [score, setScore] = useState(0);\n\n  return (\n    <Provider value={{\n      questionNr, setQuestionNr,\n      checkAnswer, setCheckAnswer,\n      userAnswer, setUserAnswer,\n      score, setScore,\n    }}>\n      <AppBar />\n      <Game />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}